# -*- coding: utf-8 -*-
"""
bot.py ‚Äî Telegram-–±–æ—Ç MP2.
–§—É–Ω–∫—Ü–∏–∏:
- –í–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ (–≤—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞ –∏–∑ 15 –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 1‚Äì5)
- –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
- –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ –û–¢‚Äî–î–û

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pyTelegramBotAPI, gspread, google-auth
–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
- BOT_TOKEN (–µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –∫–æ–¥–µ)
- SERVICE_JSON_PATH, SPREADSHEET_ID, DATA_SHEET_NAME (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)

–ó–∞–ø—É—Å–∫: python3 bot.py
"""
from __future__ import annotations

import os
from datetime import datetime

import telebot
from telebot import types

import sheets

# === –¢–æ–∫–µ–Ω ===
BOT_TOKEN = os.getenv("BOT_TOKEN", "7557353716:AAFo_rYUXohocp9N0axnoX9Nm-e0QYNsMr0")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
# –°–ø–∏—Å–æ–∫ 15 –æ—Ç–¥–µ–ª–æ–≤ ‚Äî –ø–æ–ø—Ä–∞–≤—å –ø–æ–¥ —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤–∏–∑—É–∞–ª—å–Ω–æ)
DEPARTMENTS = [
    "–û—Ç–¥–µ–ª 1", "–û—Ç–¥–µ–ª 2", "–û—Ç–¥–µ–ª 3", "–û—Ç–¥–µ–ª 4", "–û—Ç–¥–µ–ª 5",
    "–û—Ç–¥–µ–ª 6", "–û—Ç–¥–µ–ª 7", "–û—Ç–¥–µ–ª 8", "–û—Ç–¥–µ–ª 9", "–û—Ç–¥–µ–ª 10",
    "–û—Ç–¥–µ–ª 11", "–û—Ç–¥–µ–ª 12", "–û—Ç–¥–µ–ª 13", "–û—Ç–¥–µ–ª 14", "–û—Ç–¥–µ–ª 15",
]

QTY_CHOICES = ["1", "2", "3", "4", "5"]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π: chat_id -> {"dep": str, "qty": int}
STATE = {}

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üìù –í–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ"))
    kb.add(types.KeyboardButton("üìÖ –î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"))
    kb.add(types.KeyboardButton("üìà –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ –û–¢‚Äî–î–û"))
    return kb


def departments_kb():
    kb = types.InlineKeyboardMarkup(row_width=3)
    buttons = [types.InlineKeyboardButton(text=dep, callback_data=f"dep::{dep}") for dep in DEPARTMENTS]
    kb.add(*buttons)
    return kb


def qty_kb():
    kb = types.InlineKeyboardMarkup(row_width=5)
    buttons = [types.InlineKeyboardButton(text=q, callback_data=f"qty::{q}") for q in QTY_CHOICES]
    kb.add(*buttons)
    return kb


# === –ö–æ–º–∞–Ω–¥—ã ===
@bot.message_handler(commands=["start", "help"])
def cmd_start(message: types.Message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ MP2-–±–æ—Ç.\n\n"
        "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=main_menu(),
    )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ===
@bot.message_handler(func=lambda m: m.text == "üìù –í–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ")
def menu_add(message: types.Message):
    STATE[message.chat.id] = {}
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏ –æ—Ç–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=departments_kb()
    )



@bot.message_handler(func=lambda m: m.text == "üìÖ –î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
def menu_today(message: types.Message):
    agg, total, date_str = sheets.aggregate_today()
    text = sheets.render_summary(agg, total, f"–°–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({date_str})")
    bot.send_message(message.chat.id, text, reply_markup=main_menu())


@bot.message_handler(func=lambda m: m.text == "üìà –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ –û–¢‚Äî–î–û")
def menu_range(message: types.Message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –û–¢ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    bot.register_next_step_handler(msg, ask_date_to)


def ask_date_to(message: types.Message):
    date_from_txt = message.text.strip()
    try:
        dfrom = datetime.strptime(date_from_txt, "%d.%m.%Y").strftime("%Y-%m-%d")
    except Exception:
        msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É –û–¢ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        bot.register_next_step_handler(msg, ask_date_to)
        return

    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ
    STATE[message.chat.id] = STATE.get(message.chat.id, {})
    STATE[message.chat.id]["date_from"] = dfrom

    msg = bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–∞—Ç—É –î–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    bot.register_next_step_handler(msg, show_range_summary)


def show_range_summary(message: types.Message):
    date_to_txt = message.text.strip()
    try:
        dto = datetime.strptime(date_to_txt, "%d.%m.%Y").strftime("%Y-%m-%d")
    except Exception:
        msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É –î–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        bot.register_next_step_handler(msg, show_range_summary)
        return

    st = STATE.get(message.chat.id, {})
    dfrom = st.get("date_from")
    if not dfrom:
        bot.send_message(message.chat.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –û–¢. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=main_menu())
        return

    agg, total = sheets.aggregate_by_period(dfrom, dto)
    text = sheets.render_summary(agg, total, f"–°–≤–æ–¥–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {dfrom} ‚Äî {dto}")
    bot.send_message(message.chat.id, text, reply_markup=main_menu())


# === Callback-–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ ===
@bot.callback_query_handler(func=lambda c: c.data.startswith("dep::"))
def pick_department(callback: types.CallbackQuery):
    dep = callback.data.split("::", 1)[1]
    chat_id = callback.message.chat.id
    STATE[chat_id] = STATE.get(chat_id, {})
    STATE[chat_id]["dep"] = dep

    bot.answer_callback_query(callback.id, text=f"–û—Ç–¥–µ–ª: {dep}")
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=callback.message.message_id,
        text=f"–û—Ç–¥–µ–ª –≤—ã–±—Ä–∞–Ω: <b>{dep}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
        reply_markup=qty_kb(),
    )


@bot.callback_query_handler(func=lambda c: c.data.startswith("qty::"))
def pick_qty(callback: types.CallbackQuery):
    qty_text = callback.data.split("::", 1)[1]
    chat_id = callback.message.chat.id
    st = STATE.get(chat_id, {})
    dep = st.get("dep")

    if not dep:
        bot.answer_callback_query(callback.id, text="–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –æ—Ç–¥–µ–ª.")
        return

    qty = int(qty_text)

    # –ö—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–ª—è –∑–∞–ø–∏—Å–∏)
    user_txt = (
        f"@{callback.from_user.username}" if callback.from_user.username else
        f"{callback.from_user.first_name or ''} {callback.from_user.last_name or ''}".strip()
    ) or str(callback.from_user.id)

    ok, msg = sheets.append_entry(department=dep, qty=qty, user=user_txt, ref="non")

    bot.answer_callback_query(callback.id)
    if ok:
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=callback.message.message_id,
            text=(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É:\n"
                f"–û—Ç–¥–µ–ª: <b>{dep}</b>\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{qty}</b>\n\n"
                f"–ï—â—ë —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å?"
            ),
            reply_markup=main_menu(),
        )
    else:
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=callback.message.message_id,
            text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. {msg}",
            reply_markup=main_menu(),
        )


if __name__ == "__main__":
    print("MP2-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã...")
    bot.infinity_polling(skip_pending=True, allowed_updates=telebot.util.update_types)
