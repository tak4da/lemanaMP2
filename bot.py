
# -*- coding: utf-8 -*-
"""
–ë–æ—Ç –æ–ø—Ä–æ—Å–∞ —Å –≤—ã–±–æ—Ä–æ–º 1‚Äì3 –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ".
–õ–æ–≥–∏–∫–∞:
1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Ç–¥–µ–ª (1‚Äì15).
2) –û—Ç–≤–µ—Ç—ã –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–∞–∂–¥—ã–π: 1, 2, 3, –ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ.
3) –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å—å –≤ Google Sheets (–ª–∏—Å—Ç "data_bot").
–ê–≤—Ç–æ—Ä: MP2
"""
import os
import time
from datetime import datetime
import telebot
from telebot import types

from sheets import SheetClient

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "7557353716:AAFo_rYUXohocp9N0axnoX9Nm-e0QYNsMr0")
# ID —Ç–∞–±–ª–∏—Ü—ã
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID", "1VNLbyz58pWLm9wCQ5mhQar90dO4Y8kKpgRT8NfS7HVs")
# –ò–º—è –ª–∏—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
DATA_SHEET_NAME = os.getenv("DATA_SHEET_NAME", "data_bot")

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ï–≤—Ä–æ–ø–∞/–ê–º—Å—Ç–µ—Ä–¥–∞–º (UTC+2 –∏–ª–∏ +1 –∑–∏–º–Ω–∏–π). –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–∏—à–µ–º –≤—Ä–µ–º—è –ª–æ–∫–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ 24—á —Ñ–æ—Ä–º–∞—Ç–µ
# –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å—Ç—Ä–æ–≥–æ –ø–æ –ê–º—Å—Ç–µ—Ä–¥–∞–º—É ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å pytz/zoneinfo –∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å timezone.
TIME_FORMAT = "%H:%M"  # 24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
DATE_FORMAT = "%Y-%m-%d"

bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")
sheets = SheetClient(spreadsheet_id=SPREADSHEET_ID, worksheet_name=DATA_SHEET_NAME)

# –ü—É–ª —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
SESSIONS = {}

# –í–æ–ø—Ä–æ—Å—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–º–µ–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
QUESTIONS = [
    ("–°–∫–æ–ª—å–∫–æ <b>–∫–ª—é—á-–∫–∞—Ä—Ç –¥–ª—è –¥–æ–º–∞</b> —Ç—ã —Å–µ–≥–æ–¥–Ω—è –≤—ã–¥–∞–ª(–∞)?", "keycards_home"),
    ("–°–∫–æ–ª—å–∫–æ <b>–∫–ª—é—á-–∫–∞—Ä—Ç –ü–†–û</b> —Ç—ã —Å–µ–≥–æ–¥–Ω—è –≤—ã–¥–∞–ª(–∞)?", "keycards_pro"),
    ("–°–∫–æ–ª—å–∫–æ <b>–ª–∏–¥–æ–≤</b> —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Å–≥–µ–Ω–µ—Ä–∏–ª(–∞)?", "leads"),
    ("–°–∫–æ–ª—å–∫–æ <b>–∞–∫—Ü–∏–π –¥–ª—è B2B</b> —Ç—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–¥–∞–ª(–∞)?", "b2b_deals"),
    ("–°–∫–æ–ª—å–∫–æ <b>—É—Å–ª—É–≥</b> —Ç—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–¥–∞–ª(–∞)?", "services"),
]

# –ö–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞ 1‚Äì3 + –ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ
def answer_keyboard(q_index: int) -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(row_width=4)
    kb.add(
        types.InlineKeyboardButton("1", callback_data=f"q{q_index}:1"),
        types.InlineKeyboardButton("2", callback_data=f"q{q_index}:2"),
        types.InlineKeyboardButton("3", callback_data=f"q{q_index}:3"),
        types.InlineKeyboardButton("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ", callback_data=f"q{q_index}:na"),
    )
    return kb

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–∞ 1‚Äì15
def department_keyboard() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(row_width=5)
    buttons = [types.InlineKeyboardButton(str(i), callback_data=f"dep:{i}") for i in range(1, 16)]
    kb.add(*buttons)
    return kb

def start_session(user_id):
    SESSIONS[user_id] = {
        "department": None,
        "answers": {},
        "current_q": 0,
        "start_ts": time.time(),
    }

def get_username(message):
    name = message.from_user.full_name or message.from_user.username or str(message.from_user.id)
    return name

@bot.message_handler(commands=['start', 'help'])
def cmd_start(message):
    user_id = message.from_user.id
    start_session(user_id)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π <b>–æ—Ç–¥–µ–ª</b> (1‚Äì15):",
        reply_markup=department_keyboard()
    )

@bot.callback_query_handler(func=lambda c: c.data.startswith("dep:"))
def on_department(call):
    user_id = call.from_user.id
    dep = call.data.split(":")[1]
    if user_id not in SESSIONS:
        start_session(user_id)
    SESSIONS[user_id]["department"] = dep
    SESSIONS[user_id]["current_q"] = 0

    # –ó–∞–¥–∞—ë–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    q_text, _ = QUESTIONS[0]
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–û—Ç–¥–µ–ª: <b>{dep}</b> ‚úÖ\n\n{q_text}",
        reply_markup=answer_keyboard(0)
    )

@bot.callback_query_handler(func=lambda c: c.data.startswith("q"))
def on_answer(call):
    user_id = call.from_user.id
    if user_id not in SESSIONS:
        start_session(user_id)

    payload = call.data  # —Ñ–æ—Ä–º–∞—Ç: q{index}:{value}
    try:
        left, value = payload.split(":")
        q_index = int(left[1:])
    except Exception:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    SESSIONS[user_id]["answers"][q_index] = None if value == "na" else int(value)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    next_q = q_index + 1
    if next_q < len(QUESTIONS):
        SESSIONS[user_id]["current_q"] = next_q
        q_text, _ = QUESTIONS[next_q]
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"{q_text}",
            reply_markup=answer_keyboard(next_q)
        )
    else:
        # –í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ–±—Ä–∞–Ω—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        name = get_username(call.message)
        dep = SESSIONS[user_id]["department"]
        answers = SESSIONS[user_id]["answers"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
        now = datetime.now()
        date_str = now.strftime(DATE_FORMAT)
        time_str = now.strftime(TIME_FORMAT)

        row = {
            "date": date_str,
            "time": time_str,
            "user": name,
            "department": dep,
        }
        # –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
        for idx, (_qtext, colname) in enumerate(QUESTIONS):
            row[colname] = answers.get(idx)

        # –ü–∏—à–µ–º –≤ Google Sheets
        ok, err = sheets.append_row(row)
        if ok:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="""‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!
–û—Ç–¥–µ–ª: ...
"""
                    f"–û—Ç–¥–µ–ª: <b>{dep}</b>
"
                    f"–î–∞—Ç–∞: <b>{date_str}</b>, –í—Ä–µ–º—è: <b>{time_str}</b>

"
                    "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –Ω–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ—â—ë —Ä–∞–∑."
                ),
            )
        else:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {err}",
            )
        # –ß–∏—Å—Ç–∏–º —Å–µ—Å—Å–∏—é
        start_session(user_id)

@bot.message_handler(commands=['cancel'])
def cmd_cancel(message):
    user_id = message.from_user.id
    start_session(user_id)
    bot.reply_to(message, "–û–ø—Ä–æ—Å —Å–±—Ä–æ—à–µ–Ω. –ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

if __name__ == "__main__":
    print("Bot is running...")
    bot.infinity_polling(skip_pending=True, timeout=60, long_polling_timeout=50)
