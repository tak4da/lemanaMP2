# -*- coding: utf-8 -*-
from __future__ import annotations

import os
from datetime import datetime

import telebot
from telebot import types

import sheets

# === –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–≤—à–∏—Ç–æ –ø–æ —Ç–≤–æ–∏–º –¥–∞–Ω–Ω—ã–º) ===
BOT_TOKEN = "7557353716:AAFo_rYUXohocp9N0axnoX9Nm-e0QYNsMr0"

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∫–∞–∫ –ø—Ä–æ—Å–∏–ª)
CATEGORIES = [
    ("cards_dom", "–ö–ª—é—á-–∫–∞—Ä—Ç–∞ –î–û–ú"),
    ("cards_pro", "–ö–ª—é—á-–∫–∞—Ä—Ç–∞ –ü–†–û"),
    ("leads", "–õ–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"),
    ("b2b", "–ê–∫—Ü–∏–∏ –¥–ª—è B2B"),
    ("services", "–£—Å–ª—É–≥–∏"),
]
QTY_CHOICES = ["1", "2", "3", "4", "5"]

# –ü–∞–º—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
STATE = {}  # chat_id -> {...}


# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üìù –í–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ"))
    kb.add(types.KeyboardButton("üìÖ –î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"))
    kb.add(types.KeyboardButton("üìà –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ –û–¢‚Äî–î–û"))
    return kb


def categories_kb():
    kb = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(text=label, callback_data=f"cat::{key}") for key, label in CATEGORIES]
    kb.add(*buttons)
    return kb


def qty_kb():
    kb = types.InlineKeyboardMarkup(row_width=5)
    buttons = [types.InlineKeyboardButton(text=q, callback_data=f"qty::{q}") for q in QTY_CHOICES]
    buttons.append(types.InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="qty::manual"))
    kb.add(*buttons)
    return kb


# ====== –°–ª—É–∂–µ–±–Ω–æ–µ ======
def user_text(user: types.User) -> str:
    return (f"@{user.username}" if user.username else f"{user.first_name or ''} {user.last_name or ''}".strip()) or str(user.id)


def reset_state(chat_id: int):
    STATE.pop(chat_id, None)


def reset_to_start(chat_id: int):
    """–°–æ–æ–±—â–µ–Ω–∏–µ '–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã' –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É –º–µ–Ω—é."""
    bot.send_message(chat_id, "‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã")
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ MP2-–±–æ—Ç. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu())
    reset_state(chat_id)


# ====== –ö–æ–º–∞–Ω–¥—ã ======
@bot.message_handler(commands=["start", "help"]) 
def cmd_start(message: types.Message):
    reset_state(message.chat.id)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ MP2-–±–æ—Ç. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu())


# ====== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ======
@bot.message_handler(func=lambda m: m.text == "üìù –í–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ")
def menu_add(message: types.Message):
    reset_state(message.chat.id)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_kb())


@bot.message_handler(func=lambda m: m.text == "üìÖ –î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
def menu_today(message: types.Message):
    agg, total, date_str = sheets.aggregate_today()
    text = sheets.render_summary(agg, total, f"–°–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({date_str})")
    bot.send_message(message.chat.id, text, reply_markup=main_menu())


@bot.message_handler(func=lambda m: m.text == "üìà –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ –û–¢‚Äî–î–û")
def menu_range(message: types.Message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –û–¢ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    bot.register_next_step_handler(msg, ask_date_to)


def ask_date_to(message: types.Message):
    date_from_txt = message.text.strip()
    try:
        dfrom = datetime.strptime(date_from_txt, "%d.%m.%Y").strftime("%Y-%m-%d")
    except Exception:
        msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É –û–¢ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        bot.register_next_step_handler(msg, ask_date_to)
        return

    STATE[message.chat.id] = {"date_from": dfrom}
    msg = bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–∞—Ç—É –î–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    bot.register_next_step_handler(msg, show_range_summary)


def show_range_summary(message: types.Message):
    date_to_txt = message.text.strip()
    try:
        dto = datetime.strptime(date_to_txt, "%d.%m.%Y").strftime("%Y-%m-%d")
    except Exception:
        msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É –î–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        bot.register_next_step_handler(msg, show_range_summary)
        return

    dfrom = STATE.get(message.chat.id, {}).get("date_from")
    if not dfrom:
        bot.send_message(message.chat.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –û–¢. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=main_menu())
        return

    agg, total = sheets.aggregate_by_period(dfrom, dto)
    text = sheets.render_summary(agg, total, f"–°–≤–æ–¥–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {dfrom} ‚Äî {dto}")
    bot.send_message(message.chat.id, text, reply_markup=main_menu())
    reset_state(message.chat.id)


# ====== Inline callbacks ======
@bot.callback_query_handler(func=lambda c: c.data.startswith("cat::"))
def pick_category(callback: types.CallbackQuery):
    key = callback.data.split("::", 1)[1]
    label = next((lbl for k, lbl in CATEGORIES if k == key), key)
    chat_id = callback.message.chat.id

    STATE[chat_id] = {"category_key": key, "category_label": label}
    bot.answer_callback_query(callback.id, text=f"{label}")
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=callback.message.message_id,
        text=f"–°–∫–æ–ª—å–∫–æ ¬´{label}¬ª —Å–µ–≥–æ–¥–Ω—è?", 
        reply_markup=qty_kb()
    )


@bot.callback_query_handler(func=lambda c: c.data.startswith("qty::"))
def pick_qty(callback: types.CallbackQuery):
    choice = callback.data.split("::", 1)[1]
    chat_id = callback.message.chat.id
    label = STATE.get(chat_id, {}).get("category_label")

    if not label:
        bot.answer_callback_query(callback.id, text="–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return

    if choice == "manual":
        bot.answer_callback_query(callback.id)
        # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id, text=f"–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –¥–ª—è ¬´{label}¬ª: ")
        msg = bot.send_message(chat_id, "–ù–∞–ø—Ä–∏–º–µ—Ä: 7")
        bot.register_next_step_handler(msg, handle_manual_qty, label, callback.message.message_id)
        return

    qty = int(choice)
    save_and_finish(callback, label, qty)


def handle_manual_qty(message: types.Message, label: str, to_edit_message_id: int):
    chat_id = message.chat.id
    txt = message.text.strip().replace(",", ".")
    if not txt.isdigit():
        msg = bot.send_message(chat_id, "–≠—Ç–æ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(msg, handle_manual_qty, label, to_edit_message_id)
        return
    qty = int(txt)
    # –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã), –ø–æ—Ç–æ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    try:
        bot.edit_message_text(chat_id=chat_id, message_id=to_edit_message_id, text=f"–í–≤–æ–¥: {qty}")
    except Exception:
        pass
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º –≤ —Å—Ç–∞—Ä—Ç
    ok, _ = sheets.append_entry(department=label, qty=qty, user=user_text(message.from_user), ref="non")
    reset_to_start(chat_id)


def save_and_finish(callback: types.CallbackQuery, label: str, qty: int):
    chat_id = callback.message.chat.id
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    ok, _ = sheets.append_entry(department=label, qty=qty, user=user_text(callback.from_user), ref="non")
    bot.answer_callback_query(callback.id)
    # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä!)
    try:
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=callback.message.message_id,
            text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{label}</b> ‚Äî {qty}"
        )
    except Exception:
        pass
    # –°–æ–æ–±—â–µ–Ω–∏–µ '–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã' –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç—É
    reset_to_start(chat_id)


if __name__ == "__main__":
    print("MP2-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.infinity_polling(skip_pending=True, allowed_updates=telebot.util.update_types)
